function y =  closed_form_algorithm(goal_matrix, q_current, type)
    %% Robot parameters
    % Link length UR5
    L1 = 0.0892;
    L2 = 0.1359;
    L3 = 0.4250;
    L4 = 0.1197;
    L5 = 0.3923;
    L6 = 0.0930;
    L7 = 0.0947;
    L8 = 0.0823;
    
    % d
    vd1 = L1;
    vd2 = 0;
    vd3 = 0;
    vd4 = L2-L4+L6;
    vd5 = L7;
    vd6 = L8;
    
    % a
    va1 = 0;
    va2 = -L3;
    va3 = -L5;
    va4 = 0;
    va5 = 0;
    va6 = 0;
    
    % Previous determinations
    px = goal_matrix(1,4);
    py = goal_matrix(2,4);
    pz = goal_matrix(3,4);
    r11 = goal_matrix(1,1); r12 = goal_matrix(1,2); r13 = goal_matrix(1,3);
    r21 = goal_matrix(2,1); r22 = goal_matrix(2,2); r23 = goal_matrix(2,3);
    r31 = goal_matrix(3,1); r32 = goal_matrix(3,2); r33 = goal_matrix(3,3);
    
    %% Closed form Algorithm 1 (All solutions)
    if type == 0
        
        % Solution sets
        sol = NaN(8,6);     % rows: number of solutions, cols: joint values
        
        % Step 1 - Both q1 solutions are computed, and complex angles are discarded.
        A = py-vd6*r23;
        B = px-vd6*r13;
        q1 = [];    % final size = 2 (number of diferent values)
        q1_1 = atan2(sqrt(B^2+(-A)^2-vd4^2),vd4)+atan2(B,-A);
        q1_2 = -atan2(sqrt(B^2+(-A)^2-vd4^2),vd4)+atan2(B,-A);
        % Checking valid values of q1 (result inside sqrt != imginary)
        if isreal(q1_1)
            q1 = [q1, q1_1];
            sol(1,1) = q1_1;
            sol(2,1) = q1_1;
            sol(3,1) = q1_1;
            sol(4,1) = q1_1;
        else
            q1 = [q1, NaN];
        end
        if isreal(q1_2)
            q1 = [q1, q1_2];
            sol(5,1) = q1_2;
            sol(6,1) = q1_2;
            sol(7,1) = q1_2;
            sol(8,1) = q1_2;
        else
            q1 = [q1, NaN];
        end
        
        % Step 2 - Compute q5. The sets containing values of q5 that are not considered valid are rejected.
        q5 = [];    % final size = 4 (number of diferent values)
        for i = 1:size(q1,2)
            q1_i = q1(i);
            if isnan(q1_i)
                q5 = [q5,NaN(1,2)];
            else
                C = sin(q1_i)*r11-cos(q1_i)*r21;
                D = cos(q1_i)*r22-sin(q1_i)*r12;
                q5_1 = atan2(sqrt(C^2+D^2),sin(q1_i)*r13-cos(q1_i)*r23);
                q5_2 = -atan2(sqrt(C^2+D^2),sin(q1_i)*r13-cos(q1_i)*r23);
                % Checking valid values of q5 (real and |s5|>1e-12)
                if isreal(q5_1) && (abs(sin(q5_1))>1e-12)
                    q5 = [q5, q5_1];
                    sol(1+4*(i-1),5) = q5_1;
                    sol(2+4*(i-1),5) = q5_1;
                else
                    q5 = [q5, NaN];
                end
                if isreal(q5_2) && (abs(sin(q5_2))>1e-12)
                    q5 = [q5, q5_2];
                    sol(3+4*(i-1),5) = q5_2;
                    sol(4+4*(i-1),5) = q5_2;
                else
                    q5 = [q5, NaN];
                end
            end
        end
        
        % Step 3 - q6 is computed for the remaining sets.
        q6 = [];    % final size = 4 (number of diferent values)
        for i = 1:size(q5,2)
            q5_i = q5(i);   % sol(1+2*(i-1),5)
            if isnan(q5_i)
                q6 = [q6,NaN];
            else
                q1_i = sol(1+2*(i-1),1);
                C = sin(q1_i)*r11-cos(q1_i)*r21;
                D = cos(q1_i)*r22-sin(q1_i)*r12;
                q6_i = atan2(D/sin(q5_i),C/sin(q5_i));
                q6 = [q6, q6_i];
                sol(1+2*(i-1),6) = q6_i;
                sol(2+2*(i-1),6) = q6_i;
            end
        end
        
        % Step 4 - q3 computed and verified. Again, the solutions with angles that are not acceptable are discarded.
        q3 = [];    % final size = 8 (number of diferent values)
        qaux = [];  % final size = 8
        PC = [];
        PS = [];
        for i = 1:1:size(q6,2)
            q6_i = sol(1+2*(i-1),6);
            if isnan(q6_i)
                q3 = [q3,NaN];
            else
                q1_i = sol(1+2*(i-1),1);
                q5_i = sol(1+2*(i-1),5);
                E = cos(q1_i)*r11+sin(q1_i)*r21;
                F = cos(q5_i)*cos(q6_i);
                qaux_i = atan2(r31*F-sin(q6_i)*E,F*E+sin(q6_i)*r31);  % q234
                PC_i = cos(q1_i)*px+sin(q1_i)*py-sin(qaux_i)*vd5+cos(qaux_i)*sin(q5_i)*vd6;
                % disp("PC_i"); disp(PC_i);
                PS_i = pz-vd1+cos(qaux_i)*vd5+sin(qaux_i)*sin(q5_i)*vd6;
                % disp("PS_i"); disp(PS_i);
                qaux = [qaux, qaux_i, qaux_i];
                PC = [PC, PC_i, PC_i];
                PS = [PS, PS_i, PS_i];
                if ~isreal(sqrt(1-((PS_i^2+PC_i^2-va2^2-va3^2)/(2*va2*va3))^2))
                    q3 = [q3, NaN, NaN];
                    continue
                end
                q3_1 = atan2(sqrt(1-((PS_i^2+PC_i^2-va2^2-va3^2)/(2*va2*va3))^2),(PS_i^2+PC_i^2-va2^2-va3^2)/(2*va2*va3));
                q3_2 = -atan2(sqrt(1-((PS_i^2+PC_i^2-va2^2-va3^2)/(2*va2*va3))^2),(PS_i^2+PC_i^2-va2^2-va3^2)/(2*va2*va3));
                % Checking valid values of q3 (real and |s3|>1e-12)
                if isreal(q3_1) && (abs(sin(q3_1))>1e-12)
                    q3 = [q3, q3_1];
                    sol(1+2*(i-1),3) = q3_1;
                else
                    q3 = [q3, NaN];
                end
                if isreal(q3_2) && (abs(sin(q3_2))>1e-12)
                    q3 = [q3, q3_2];
                    sol(2+2*(i-1),3) = q3_2;
                else
                    q3 = [q3, NaN];
                end
            end
        end
        
        % Step 5 - q2 and q4 computed, and the sets of angles that are not valid are rejected.
        q2 = [];    % final size = 8 (number of diferent values)
        q4 = [];    % final size = 8 (number of diferent values)
        for i = 1:8
            q3_i = sol(i,3);
            if isnan(q3_i)
                q2 = [q2,NaN];
                q4 = [q4,NaN];
            else
                PS_i = PS(i);
                PC_i = PC(i);
                qaux_i = qaux(i);
                q2_i = atan2(PS_i,PC_i)-atan2(sin(q3_i)*va3,cos(q3_i)*va3+va2);
                q4_i = qaux_i-q2_i-q3_i;
                condition = vd5*sin(qaux_i)+va2*cos(q2_i)+va3*cos(q2_i+q3_i);
                if abs(condition) <= 1e-9
                    q2 = [q2, NaN];
                    q4 = [q4, NaN];
                else
                    q2 = [q2, q2_i];
                    q4 = [q4, q4_i];
                    sol(i,2) = q2_i;
                    sol(i,4) = q4_i;
                end
            end
        end
        
        %  Step 6 - Solution with the minimal difference with respect to the current joint positions.
        % q_current = [0, 0, 0, 0, 0, 0];
        wgs = [1, 1, 1, 1, 1, 1];  % Define the weights for each joint
        % diff = [];
        % for i = 1:8
        %     diff(i) = sqrt(sum(weights .* abs(q_current - sol(i,:))));
        % end
        % [min_dif, idx] = min(diff);
        % y = sol(idx,:);
        valid_rows = all(~isnan(sol), 2);   % filas sin ningún NaN
        if any(valid_rows)
            diffs = sum(abs(sol(valid_rows, :) - q_current) .* wgs');  % distancia ponderada
            [~, min_idx] = min(diffs);
            valid_indices = find(valid_rows);  % índices originales válidos
            idx = valid_indices(min_idx);
            y = sol(idx, :);
        else
            disp('No feasible solution found!')
            y = nan(1, 6);  % No hay soluciones válidas
        end
        disp(sol)
        % disp('The solution found is:')
        % disp(y)
        
    %% Closed form Algorithm 2 (FSM)
    elseif type == 1
    
        % define states
        S1 = 0;
        S5 = 1;
        S6 = 2;
        S3 = 3;
        S24 = 4;
        Send = 5;   % End state
        
        % Joint variables for the computed solutions
        q1 = [];
        q2 = [];
        q3 = [];
        q4 = [];
        q5 = [];
        q6 = [];
        Z = [];     % complete solution set
        
        % Variables to indicate if the angles have been changed from the initial selection
        ch1 = 0;
        ch3 = 0;
        ch5 = 0;
        
        % Variables initialization
        v_end = 0;
        current_state = S1;   
        while (v_end == 0)
            % switch to new state based on the value state register
            switch (current_state) 
                
                case S1     % q1 computed and verified
                    
                    A = py-vd6*r23;
                    B = px-vd6*r13;
                    q1_1 = atan2(sqrt(B^2+(-A)^2-vd4^2),vd4)+atan2(B,-A);
                    q1_2 = -atan2(sqrt(B^2+(-A)^2-vd4^2),vd4)+atan2(B,-A);
                    % Checking valid values of q1 (result inside sqrt != imginary)
                    if isreal(q1_1)
                        q1 = [q1, q1_1];
                    end
                    if isreal(q1_2) 
                        q1 = [q1, q1_2];
                    end
                    if size(q1,2) == 0      % q1 not ok
                        Z = [];
                        current_state = Send;
                    elseif size(q1,2) == 2      % q1 ok (but 2 results ok)
                        [M, idx] = min(abs(q_current(1)-q1));
                        q1 = [q1(idx) q1(size(q1,2)-idx+1)];    % ordered list (w.r.t. distance to current q1)
                        current_state = S5;
                    else    % q1 ok (but only 1 result ok, same as size(q1,2) == 1)
                        current_state = S5;
                    end
            
                case S5     % q5 computed and verified
                    
                    q1_i = q1(1);
                    C = sin(q1_i)*r11-cos(q1_i)*r21;
                    D = cos(q1_i)*r22-sin(q1_i)*r12;
                    q5_1 = atan2(sqrt(C^2+D^2),sin(q1_i)*r13-cos(q1_i)*r23);
                    q5_2 = -atan2(sqrt(C^2+D^2),sin(q1_i)*r13-cos(q1_i)*r23);
                    % Checking valid values of q5 (real and |s5|>1e-12)
                    if isreal(q5_1) && (abs(sin(q5_1))>1e-12)   % q5 ok (same as size(q5,2) == 2)
                        q5 = [q5, q5_1];
                        q5 = [q5, q5_2];
                        [M, idx] = min(abs(q_current(5)-q5));
                        q5 = [q5(idx) q5(size(q5,2)-idx+1)];    % ordered list (w.r.t. distance to current q5)
                        current_state = S6;
                    else    % same as size(q5,2) == 0
                        if ch1 == 0 && size(q1,2) == 2      % q5 not ok, ch1 = 0
                            ch1 = 1;
                            q1 = q1(2:end);
                            current_state = S5;
                        else        % q5 not ok, ch1 = 1
                            Z = [];
                            current_state = Send;
                        end
                    end        
                    
                case S6     % q6 is computed for the remaining sets
                    
                    q1_i = q1(1);
                    q5_i = q5(1);
                    C = sin(q1_i)*r11-cos(q1_i)*r21;
                    D = cos(q1_i)*r22-sin(q1_i)*r12;
                    q6_i = atan2(D/sin(q5_i),C/sin(q5_i));
                    q6 = q6_i;
                    current_state = S3;        
                    
                case S3     % q3 computed and verified. Again, the solutions with angles that are not acceptable are discarded
                    
                    q1_i = q1(1);
                    q5_i = q5(1);
                    q6_i = q6(1);
                    E = cos(q1_i)*r11+sin(q1_i)*r21;
                    F = cos(q5_i)*cos(q6_i);
                    qaux_i = atan2(r31*F-sin(q6_i)*E,F*E+sin(q6_i)*r31);  % q234
                    PC_i = cos(q1_i)*px+sin(q1_i)*py-sin(qaux_i)*vd5+cos(qaux_i)*sin(q5_i)*vd6;
                    PS_i = pz-vd1+cos(qaux_i)*vd5+sin(qaux_i)*sin(q5_i)*vd6;
                    if ~isreal(sqrt(1-((PS_i^2+PC_i^2-va2^2-va3^2)/(2*va2*va3))^2))
                        continue
                    end
                    q3_1 = atan2(sqrt(1-((PS_i^2+PC_i^2-va2^2-va3^2)/(2*va2*va3))^2),(PS_i^2+PC_i^2-va2^2-va3^2)/(2*va2*va3));
                    q3_2 = -atan2(sqrt(1-((PS_i^2+PC_i^2-va2^2-va3^2)/(2*va2*va3))^2),(PS_i^2+PC_i^2-va2^2-va3^2)/(2*va2*va3));
                    % Checking valid values of q3 (real and |s3|>1e-12)
                    if isreal(q3_1) && (abs(sin(q3_1))>1e-12)   % q3 ok
                        q3 = [q3, q3_1];
                        q3 = [q3, q3_2];
                        [M, idx] = min(abs(q_current(3)-q3));
                        q3 = [q3(idx) q3(size(q3,2)-idx+1)];    % ordered list (w.r.t. distance to current q3)
                        current_state = S24;
                    else
                        if ch5 == 0     % q3 not ok, ch5 = 0
                            ch5 = 1;
                            q5 = q5(2:end);
                            current_state = S6;
                        elseif ch1 == 0 && size(q1,2) == 2      % q3 not ok, ch5 = 1, ch1 = 0
                            ch1 = 1;
                            ch5 = 0;
                            q1 = q1(2:end);
                            q5 = [];
                            current_state = S5;
                        else    % q3 not ok, ch1 = 1, ch5 = 1
                            Z = [];
                            current_state = Send;
                        end
                    end
                
                case S24    % q2 and q4 computed, and the sets of angles that are not valid are rejected
            
                    q1_i = q1(1);
                    q3_i = q3(1);
                    q5_i = q5(1);
                    q6_i = q6(1);
                    q2_i = atan2(PS_i,PC_i)-atan2(sin(q3_i)*va3,cos(q3_i)*va3+va2);
                    q4_i = qaux_i-q2_i-q3_i;
                    condition = vd5*sin(qaux_i)+va2*cos(q2_i)+va3*cos(q2_i+q3_i);
                    if abs(condition) > 1e-9    % q2,q4 ok
                        Z = [q1_i,q2_i,q3_i,q4_i,q5_i,q6_i];
                        current_state = Send;
                    else    
                        if ch3 == 0     % q2 q4 not ok, ch3 = 0
                            ch3 = 1;
                            q3 = q3(2:end);
                            current_state = S24;
                        elseif ch5 == 0     % q2 q4 not ok, ch3 = 1, ch5 = 0
                            ch5 = 1;
                            q5 = q5(2:end);
                            current_state = S6;
                        elseif ch1 == 0 && size(q1,2) == 2  % q2 q4 not ok, ch3 = 1, ch5 = 1, ch1 = 0
                            ch1 = 1;
                            ch5 = 0;
                            q1 = q1(2:end);
                            q5 = [];
                            current_state = S5;
                        else        % q2 q4 not ok, ch1 = 1, ch3 = 1, ch5 = 1
                            Z = [];
                            current_state = Send;
                        end
                    end
            
                case Send   % End of the algorithm
                    
                    v_end = 1;
                    if size(Z,2) == 0
                        disp('Algorithm finished and found no solution!!')
                    else
                        disp('Algorithm finished with solution:')
                        disp(Z)
                    end
                    
                otherwise
                    
                    disp('There is an error in the state selection or the algorithm is wrong!!')
                    
            end
        end
        y = Z;
    else
        y = [];
        disp('Error selecting algorithm!!')
    end
end